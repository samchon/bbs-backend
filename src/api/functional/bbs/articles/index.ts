/**
 * @packageDocumentation
 * @module api.functional.bbs.articles
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import type { tags } from "typia";

import type { IBbsArticle } from "../../../structures/bbs/IBbsArticle";
import type { IPage } from "../../../structures/common/IPage";

export * as comments from "./comments/index";

/**
 * List up all summarized articles.
 *
 * List up all summarized articles with pagination and searching options.
 *
 * @param props.body Request info of pagination and searching options.
 * @returns Paginated summarized articles.
 * @tag BBS
 * @author Samchon
 *
 * @controller BbsArticlesController.index
 * @path PATCH /bbs/articles
 * @accessor api.functional.bbs.articles.index
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Output> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          template: index.METADATA.path,
          path: index.path(),
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Request info of pagination and searching options.
     */
    body: Body;
  };
  export type Body = IBbsArticle.IRequest;
  export type Output = IPage<IBbsArticle.ISummary>;

  export const METADATA = {
    method: "PATCH",
    path: "/bbs/articles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/bbs/articles";
  export const random = (): IPage<IBbsArticle.ISummary> =>
    typia.random<IPage<IBbsArticle.ISummary>>();
  export const simulate = (connection: IConnection, props: Props): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(props.body));
    return random();
  };
}

/**
 * List up all abridged articles.
 *
 * List up all abridged articles with pagination and searching options.
 *
 * @param props.body Request info of pagination and searching options.
 * @returns Paginated abridged articles.
 * @tag BBS
 * @author Samchon
 *
 * @controller BbsArticlesController.abridges
 * @path PATCH /bbs/articles/abridges
 * @accessor api.functional.bbs.articles.abridges
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function abridges(
  connection: IConnection,
  props: abridges.Props,
): Promise<abridges.Output> {
  return true === connection.simulate
    ? abridges.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...abridges.METADATA,
          template: abridges.METADATA.path,
          path: abridges.path(),
        },
        props.body,
      );
}
export namespace abridges {
  export type Props = {
    /**
     * Request info of pagination and searching options.
     */
    body: Body;
  };
  export type Body = IBbsArticle.IRequest;
  export type Output = IPage<IBbsArticle.IAbridge>;

  export const METADATA = {
    method: "PATCH",
    path: "/bbs/articles/abridges",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/bbs/articles/abridges";
  export const random = (): IPage<IBbsArticle.IAbridge> =>
    typia.random<IPage<IBbsArticle.IAbridge>>();
  export const simulate = (connection: IConnection, props: Props): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(props.body));
    return random();
  };
}

/**
 * Read individual article.
 *
 * Reads an article with its every {@link IBbsArticle.ISnapshot snapshots}.
 *
 * @param props.id Target article's {@link IBbsArticle.id }
 * @returns Article information
 * @tag BBS
 * @author Samchon
 *
 * @controller BbsArticlesController.at
 * @path GET /bbs/articles/:id
 * @accessor api.functional.bbs.articles.at
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Output> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(connection, {
        ...at.METADATA,
        template: at.METADATA.path,
        path: at.path(props),
      });
}
export namespace at {
  export type Props = {
    /**
     * Target article's
     */
    id: string & tags.Format<"uuid">;
  };
  export type Output = IBbsArticle;

  export const METADATA = {
    method: "GET",
    path: "/bbs/articles/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (props: Props) =>
    `/bbs/articles/${encodeURIComponent(props.id?.toString() ?? "null")}`;
  export const random = (): IBbsArticle => typia.random<IBbsArticle>();
  export const simulate = (connection: IConnection, props: Props): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(props),
      contentType: "application/json",
    });
    assert.param("id")(() => typia.assert(props.id));
    return random();
  };
}

/**
 * Create a new article.
 *
 * Create a new article with its first {@link IBbsArticle.ISnapshot snapshot}.
 *
 * @param props.body Article information to create.
 * @returns Newly created article.
 * @tag BBS
 * @author Samchon
 *
 * @controller BbsArticlesController.create
 * @path POST /bbs/articles
 * @accessor api.functional.bbs.articles.create
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Output> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          template: create.METADATA.path,
          path: create.path(),
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Article information to create.
     */
    body: Body;
  };
  export type Body = IBbsArticle.ICreate;
  export type Output = IBbsArticle;

  export const METADATA = {
    method: "POST",
    path: "/bbs/articles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/bbs/articles";
  export const random = (): IBbsArticle => typia.random<IBbsArticle>();
  export const simulate = (connection: IConnection, props: Props): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(props.body));
    return random();
  };
}

/**
 * Update an article.
 *
 * Accumulate a new {@link IBbsArticle.ISnapshot snapshot} record to the article.
 *
 * @param props.id Target article's {@link IBbsArticle.id }
 * @param props.body Article information to update.
 * @returns Newly accumulated snapshot information.
 * @tag BBS
 * @author Samchon
 *
 * @controller BbsArticlesController.update
 * @path PUT /bbs/articles/:id
 * @accessor api.functional.bbs.articles.update
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Output> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          template: update.METADATA.path,
          path: update.path(props),
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * Target article's
     */
    id: string & tags.Format<"uuid">;

    /**
     * Article information to update.
     */
    body: Body;
  };
  export type Body = IBbsArticle.IUpdate;
  export type Output = IBbsArticle.ISnapshot;

  export const METADATA = {
    method: "PUT",
    path: "/bbs/articles/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/bbs/articles/${encodeURIComponent(props.id?.toString() ?? "null")}`;
  export const random = (): IBbsArticle.ISnapshot =>
    typia.random<IBbsArticle.ISnapshot>();
  export const simulate = (connection: IConnection, props: Props): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(props),
      contentType: "application/json",
    });
    assert.param("id")(() => typia.assert(props.id));
    assert.body(() => typia.assert(props.body));
    return random();
  };
}

/**
 * Erase an article.
 *
 * Performs soft deletion to the article.
 *
 * @param props.id Target article's {@link IBbsArticle.id }
 * @param props.body Password of the article.
 * @tag BBS
 * @author Samchon
 *
 * @controller BbsArticlesController.erase
 * @path DELETE /bbs/articles/:id
 * @accessor api.functional.bbs.articles.erase
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          template: erase.METADATA.path,
          path: erase.path(props),
        },
        props.body,
      );
}
export namespace erase {
  export type Props = {
    /**
     * Target article's
     */
    id: string & tags.Format<"uuid">;

    /**
     * Password of the article.
     */
    body: Body;
  };
  export type Body = IBbsArticle.IErase;

  export const METADATA = {
    method: "DELETE",
    path: "/bbs/articles/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/bbs/articles/${encodeURIComponent(props.id?.toString() ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (connection: IConnection, props: Props): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(props),
      contentType: "application/json",
    });
    assert.param("id")(() => typia.assert(props.id));
    assert.body(() => typia.assert(props.body));
    return random();
  };
}
