/**
 * @packageDocumentation
 * @module api.functional.bbs.articles
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import type { IConnection, Primitive } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import type { Format } from "typia/lib/tags/Format";

import type { IBbsArticle } from "../../../structures/bbs/IBbsArticle";
import type { IPage } from "../../../structures/common/IPage";
import { NestiaSimulator } from "../../../utils/NestiaSimulator";

export * as comments from "./comments";

/**
 * List up all summarized articles.
 * 
 * List up all summarized articles with pagination and searching options.
 * 
 * @param input Request info of pagination and searching options.
 * @returns Paginated summarized articles.
 * @author Samchon
 * 
 * @controller BbsArticlesController.index
 * @path PATCH /bbs/articles
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function index(
    connection: IConnection,
    input: index.Input,
): Promise<index.Output> {
    return !!connection.simulate
        ? index.simulate(
              connection,
              input,
          )
        : PlainFetcher.fetch(
              {
                  ...connection,
                  headers: {
                      ...(connection.headers ?? {}),
                      "Content-Type": "application/json",
                  },
              },
              {
                  ...index.METADATA,
                  path: index.path(),
              } as const,
              input,
          );
}
export namespace index {
    export type Input = Primitive<IBbsArticle.IRequest>;
    export type Output = Primitive<IPage<IBbsArticle.ISummary>>;

    export const METADATA = {
        method: "PATCH",
        path: "/bbs/articles",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (): string => {
        return `/bbs/articles`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<IPage<IBbsArticle.ISummary>> =>
        typia.random<Primitive<IPage<IBbsArticle.ISummary>>>(g);
    export const simulate = async (
        connection: IConnection,
        input: index.Input,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(),
            contentType: "application/json",
        });
        assert.body(() => typia.assert(input));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}

/**
 * List up all abridged articles.
 * 
 * List up all abridged articles with pagination and searching options.
 * 
 * @param input Request info of pagination and searching options.
 * @returns Paginated abridged articles.
 * @author Samchon
 * 
 * @controller BbsArticlesController.abridges
 * @path PATCH /bbs/articles/abridges
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function abridges(
    connection: IConnection,
    input: abridges.Input,
): Promise<abridges.Output> {
    return !!connection.simulate
        ? abridges.simulate(
              connection,
              input,
          )
        : PlainFetcher.fetch(
              {
                  ...connection,
                  headers: {
                      ...(connection.headers ?? {}),
                      "Content-Type": "application/json",
                  },
              },
              {
                  ...abridges.METADATA,
                  path: abridges.path(),
              } as const,
              input,
          );
}
export namespace abridges {
    export type Input = Primitive<IBbsArticle.IRequest>;
    export type Output = Primitive<IPage<IBbsArticle.IAbridge>>;

    export const METADATA = {
        method: "PATCH",
        path: "/bbs/articles/abridges",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (): string => {
        return `/bbs/articles/abridges`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<IPage<IBbsArticle.IAbridge>> =>
        typia.random<Primitive<IPage<IBbsArticle.IAbridge>>>(g);
    export const simulate = async (
        connection: IConnection,
        input: abridges.Input,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(),
            contentType: "application/json",
        });
        assert.body(() => typia.assert(input));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}

/**
 * Read individual article.
 * 
 * Reads an article with its every {@link IBbsArticle.ISnapshot snapshots}.
 * 
 * @param id Target article's {@link IBbsArticle.id}
 * @returns Article information
 * @author Samchon
 * 
 * @controller BbsArticlesController.at
 * @path GET /bbs/articles/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function at(
    connection: IConnection,
    id: string & Format<"uuid">,
): Promise<at.Output> {
    return !!connection.simulate
        ? at.simulate(
              connection,
              id,
          )
        : PlainFetcher.fetch(
              connection,
              {
                  ...at.METADATA,
                  path: at.path(id),
              } as const,
          );
}
export namespace at {
    export type Output = Primitive<IBbsArticle>;

    export const METADATA = {
        method: "GET",
        path: "/bbs/articles/:id",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (id: string & Format<"uuid">): string => {
        return `/bbs/articles/${encodeURIComponent(id ?? "null")}`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<IBbsArticle> =>
        typia.random<Primitive<IBbsArticle>>(g);
    export const simulate = async (
        connection: IConnection,
        id: string & Format<"uuid">,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(id),
            contentType: "application/json",
        });
        assert.param("id")(() => typia.assert(id));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}

/**
 * Create a new article.
 * 
 * Create a new article with its first {@link IBbsArticle.ISnapshot snapshot}.
 * 
 * @param input Article information to create.
 * @returns Newly created article.
 * @author Samchon
 * 
 * @controller BbsArticlesController.create
 * @path POST /bbs/articles
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
    connection: IConnection,
    input: create.Input,
): Promise<create.Output> {
    return !!connection.simulate
        ? create.simulate(
              connection,
              input,
          )
        : PlainFetcher.fetch(
              {
                  ...connection,
                  headers: {
                      ...(connection.headers ?? {}),
                      "Content-Type": "application/json",
                  },
              },
              {
                  ...create.METADATA,
                  path: create.path(),
              } as const,
              input,
          );
}
export namespace create {
    export type Input = Primitive<IBbsArticle.ICreate>;
    export type Output = Primitive<IBbsArticle>;

    export const METADATA = {
        method: "POST",
        path: "/bbs/articles",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (): string => {
        return `/bbs/articles`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<IBbsArticle> =>
        typia.random<Primitive<IBbsArticle>>(g);
    export const simulate = async (
        connection: IConnection,
        input: create.Input,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(),
            contentType: "application/json",
        });
        assert.body(() => typia.assert(input));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}

/**
 * Update an article.
 * 
 * Accumulate a new {@link IBbsArticle.ISnapshot snapshot} record to the article.
 * 
 * @param id Target article's {@link IBbsArticle.id}
 * @param input Article information to update.
 * @returns Newly accumulated snapshot information.
 * @author Samchon
 * 
 * @controller BbsArticlesController.update
 * @path PUT /bbs/articles/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function update(
    connection: IConnection,
    id: string & Format<"uuid">,
    input: update.Input,
): Promise<update.Output> {
    return !!connection.simulate
        ? update.simulate(
              connection,
              id,
              input,
          )
        : PlainFetcher.fetch(
              {
                  ...connection,
                  headers: {
                      ...(connection.headers ?? {}),
                      "Content-Type": "application/json",
                  },
              },
              {
                  ...update.METADATA,
                  path: update.path(id),
              } as const,
              input,
          );
}
export namespace update {
    export type Input = Primitive<IBbsArticle.IUpdate>;
    export type Output = Primitive<IBbsArticle.ISnapshot>;

    export const METADATA = {
        method: "PUT",
        path: "/bbs/articles/:id",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (id: string & Format<"uuid">): string => {
        return `/bbs/articles/${encodeURIComponent(id ?? "null")}`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<IBbsArticle.ISnapshot> =>
        typia.random<Primitive<IBbsArticle.ISnapshot>>(g);
    export const simulate = async (
        connection: IConnection,
        id: string & Format<"uuid">,
        input: update.Input,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(id),
            contentType: "application/json",
        });
        assert.param("id")(() => typia.assert(id));
        assert.body(() => typia.assert(input));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}

/**
 * Erase an article.
 * 
 * Performs soft deletion to the article.
 * 
 * @param id Target article's {@link IBbsArticle.id}
 * @param input Password of the article.
 * @author Samchon
 * 
 * @controller BbsArticlesController.erase
 * @path DELETE /bbs/articles/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function erase(
    connection: IConnection,
    id: string & Format<"uuid">,
    input: erase.Input,
): Promise<void> {
    return !!connection.simulate
        ? erase.simulate(
              connection,
              id,
              input,
          )
        : PlainFetcher.fetch(
              {
                  ...connection,
                  headers: {
                      ...(connection.headers ?? {}),
                      "Content-Type": "application/json",
                  },
              },
              {
                  ...erase.METADATA,
                  path: erase.path(id),
              } as const,
              input,
          );
}
export namespace erase {
    export type Input = Primitive<IBbsArticle.IErase>;

    export const METADATA = {
        method: "DELETE",
        path: "/bbs/articles/:id",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (id: string & Format<"uuid">): string => {
        return `/bbs/articles/${encodeURIComponent(id ?? "null")}`;
    }
    export const simulate = async (
        connection: IConnection,
        id: string & Format<"uuid">,
        input: erase.Input,
    ): Promise<void> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(id),
            contentType: "application/json",
        });
        assert.param("id")(() => typia.assert(id));
        assert.body(() => typia.assert(input));
    }
}