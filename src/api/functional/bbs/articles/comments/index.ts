/**
 * @packageDocumentation
 * @module api.functional.bbs.articles.comments
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import type { Format } from "typia/lib/tags/Format";

import type { IBbsArticleComment } from "../../../../structures/bbs/IBbsArticleComment";
import type { IPage } from "../../../../structures/common/IPage";

/**
 * List up all summarized comments.
 *
 * List up all summarized comments with pagination and searching options.
 *
 * @param input Request info of pagination and searching options.
 * @returns Paginated summarized comments.
 * @tag BBS
 * @author Samchon
 *
 * @controller BbsArticleCommentsController.index
 * @path PATCH /bbs/articles/:articleId/comments
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function index(
  connection: IConnection,
  articleId: string & Format<"uuid">,
  input: IBbsArticleComment.IRequest,
): Promise<index.Output> {
  return !!connection.simulate
    ? index.simulate(connection, articleId, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(articleId),
        },
        input,
      );
}
export namespace index {
  export type Input = IBbsArticleComment.IRequest;
  export type Output = IPage<IBbsArticleComment>;

  export const METADATA = {
    method: "PATCH",
    path: "/bbs/articles/:articleId/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (articleId: string & Format<"uuid">) =>
    `/bbs/articles/${encodeURIComponent(articleId ?? "null")}/comments`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPage<IBbsArticleComment> => typia.random<IPage<IBbsArticleComment>>(g);
  export const simulate = (
    connection: IConnection,
    articleId: string & Format<"uuid">,
    input: IBbsArticleComment.IRequest,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(articleId),
      contentType: "application/json",
    });
    assert.param("articleId")(() => typia.assert(articleId));
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Read individual comment.
 *
 * Reads a comment with its every {@link IBbsArticleComment.ISnapshot snapshots}.
 *
 * @param articleId Belonged article's {@link IBbsArticle.id }
 * @param id Target comment's {@link IBbsArticleComment.id}
 * @returns Comment information
 * @tag BBS
 * @author Samchon
 *
 * @controller BbsArticleCommentsController.at
 * @path GET /bbs/articles/:articleId/comments/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function at(
  connection: IConnection,
  articleId: string & Format<"uuid">,
  id: string & Format<"uuid">,
): Promise<at.Output> {
  return !!connection.simulate
    ? at.simulate(connection, articleId, id)
    : PlainFetcher.fetch(connection, {
        ...at.METADATA,
        path: at.path(articleId, id),
      });
}
export namespace at {
  export type Output = IBbsArticleComment;

  export const METADATA = {
    method: "GET",
    path: "/bbs/articles/:articleId/comments/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (
    articleId: string & Format<"uuid">,
    id: string & Format<"uuid">,
  ) =>
    `/bbs/articles/${encodeURIComponent(articleId ?? "null")}/comments/${encodeURIComponent(id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IBbsArticleComment => typia.random<IBbsArticleComment>(g);
  export const simulate = (
    connection: IConnection,
    articleId: string & Format<"uuid">,
    id: string & Format<"uuid">,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(articleId, id),
      contentType: "application/json",
    });
    assert.param("articleId")(() => typia.assert(articleId));
    assert.param("id")(() => typia.assert(id));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Create a new comment.
 *
 * Create a new comment with its first {@link IBbsArticleComment.ISnapshot snapshot}.
 *
 * @param articleId Belonged article's {@link IBbsArticle.id }
 * @param input Comment information to create.
 * @returns Newly created comment.
 * @tag BBS
 * @author Samchon
 *
 * @controller BbsArticleCommentsController.create
 * @path POST /bbs/articles/:articleId/comments
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  articleId: string & Format<"uuid">,
  input: IBbsArticleComment.ICreate,
): Promise<create.Output> {
  return !!connection.simulate
    ? create.simulate(connection, articleId, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(articleId),
        },
        input,
      );
}
export namespace create {
  export type Input = IBbsArticleComment.ICreate;
  export type Output = IBbsArticleComment;

  export const METADATA = {
    method: "POST",
    path: "/bbs/articles/:articleId/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (articleId: string & Format<"uuid">) =>
    `/bbs/articles/${encodeURIComponent(articleId ?? "null")}/comments`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IBbsArticleComment => typia.random<IBbsArticleComment>(g);
  export const simulate = (
    connection: IConnection,
    articleId: string & Format<"uuid">,
    input: IBbsArticleComment.ICreate,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(articleId),
      contentType: "application/json",
    });
    assert.param("articleId")(() => typia.assert(articleId));
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update a comment.
 *
 * Accumulate a new {@link IBbsArticleComment.ISnapshot snapshot} record to the comment.
 *
 * @param articleId Belonged article's {@link IBbsArticle.id }
 * @param id Target comment's {@link IBbsArticleComment.id}
 * @param input Comment information to update.
 * @returns Newly accumulated snapshot information.
 * @tag BBS
 * @author Samchon
 *
 * @controller BbsArticleCommentsController.update
 * @path PUT /bbs/articles/:articleId/comments/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function update(
  connection: IConnection,
  articleId: string & Format<"uuid">,
  id: string & Format<"uuid">,
  input: IBbsArticleComment.IUpdate,
): Promise<update.Output> {
  return !!connection.simulate
    ? update.simulate(connection, articleId, id, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(articleId, id),
        },
        input,
      );
}
export namespace update {
  export type Input = IBbsArticleComment.IUpdate;
  export type Output = IBbsArticleComment.ISnapshot;

  export const METADATA = {
    method: "PUT",
    path: "/bbs/articles/:articleId/comments/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (
    articleId: string & Format<"uuid">,
    id: string & Format<"uuid">,
  ) =>
    `/bbs/articles/${encodeURIComponent(articleId ?? "null")}/comments/${encodeURIComponent(id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IBbsArticleComment.ISnapshot =>
    typia.random<IBbsArticleComment.ISnapshot>(g);
  export const simulate = (
    connection: IConnection,
    articleId: string & Format<"uuid">,
    id: string & Format<"uuid">,
    input: IBbsArticleComment.IUpdate,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(articleId, id),
      contentType: "application/json",
    });
    assert.param("articleId")(() => typia.assert(articleId));
    assert.param("id")(() => typia.assert(id));
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Erase a comment.
 *
 * Performs soft deletion to the comment.
 *
 * @param articleId Belonged article's {@link IBbsArticle.id }
 * @param id Target comment's {@link IBbsArticleComment.id}
 * @param input Password of the comment.
 * @tag BBS
 * @author Samchon
 *
 * @controller BbsArticleCommentsController.erase
 * @path DELETE /bbs/articles/:articleId/comments/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function erase(
  connection: IConnection,
  articleId: string & Format<"uuid">,
  id: string & Format<"uuid">,
  input: IBbsArticleComment.IErase,
): Promise<void> {
  return !!connection.simulate
    ? erase.simulate(connection, articleId, id, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(articleId, id),
        },
        input,
      );
}
export namespace erase {
  export type Input = IBbsArticleComment.IErase;

  export const METADATA = {
    method: "DELETE",
    path: "/bbs/articles/:articleId/comments/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (
    articleId: string & Format<"uuid">,
    id: string & Format<"uuid">,
  ) =>
    `/bbs/articles/${encodeURIComponent(articleId ?? "null")}/comments/${encodeURIComponent(id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection,
    articleId: string & Format<"uuid">,
    id: string & Format<"uuid">,
    input: IBbsArticleComment.IErase,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(articleId, id),
      contentType: "application/json",
    });
    assert.param("articleId")(() => typia.assert(articleId));
    assert.param("id")(() => typia.assert(id));
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
